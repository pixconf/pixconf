// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.4
// source: internal/protos/src/secrets.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SecretsClient is the client API for Secrets service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SecretsClient interface {
	CreateSecret(ctx context.Context, in *SecretCreateRequest, opts ...grpc.CallOption) (*SecretCreateResponse, error)
	UpdateSecret(ctx context.Context, in *SecretUpdateRequest, opts ...grpc.CallOption) (*SecretUpdateResponse, error)
	CreateSecretVersion(ctx context.Context, in *SecretCreateVersionRequest, opts ...grpc.CallOption) (*SecretCreateVersionResponse, error)
	TransitEncrypt(ctx context.Context, in *SecretTransitEncryptRequest, opts ...grpc.CallOption) (*SecretTransitEncryptResponse, error)
	TransitDecrypt(ctx context.Context, in *SecretTransitDecryptRequest, opts ...grpc.CallOption) (*SecretTransitDecryptResponse, error)
}

type secretsClient struct {
	cc grpc.ClientConnInterface
}

func NewSecretsClient(cc grpc.ClientConnInterface) SecretsClient {
	return &secretsClient{cc}
}

func (c *secretsClient) CreateSecret(ctx context.Context, in *SecretCreateRequest, opts ...grpc.CallOption) (*SecretCreateResponse, error) {
	out := new(SecretCreateResponse)
	err := c.cc.Invoke(ctx, "/Secrets/CreateSecret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretsClient) UpdateSecret(ctx context.Context, in *SecretUpdateRequest, opts ...grpc.CallOption) (*SecretUpdateResponse, error) {
	out := new(SecretUpdateResponse)
	err := c.cc.Invoke(ctx, "/Secrets/UpdateSecret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretsClient) CreateSecretVersion(ctx context.Context, in *SecretCreateVersionRequest, opts ...grpc.CallOption) (*SecretCreateVersionResponse, error) {
	out := new(SecretCreateVersionResponse)
	err := c.cc.Invoke(ctx, "/Secrets/CreateSecretVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretsClient) TransitEncrypt(ctx context.Context, in *SecretTransitEncryptRequest, opts ...grpc.CallOption) (*SecretTransitEncryptResponse, error) {
	out := new(SecretTransitEncryptResponse)
	err := c.cc.Invoke(ctx, "/Secrets/TransitEncrypt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretsClient) TransitDecrypt(ctx context.Context, in *SecretTransitDecryptRequest, opts ...grpc.CallOption) (*SecretTransitDecryptResponse, error) {
	out := new(SecretTransitDecryptResponse)
	err := c.cc.Invoke(ctx, "/Secrets/TransitDecrypt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SecretsServer is the server API for Secrets service.
// All implementations must embed UnimplementedSecretsServer
// for forward compatibility
type SecretsServer interface {
	CreateSecret(context.Context, *SecretCreateRequest) (*SecretCreateResponse, error)
	UpdateSecret(context.Context, *SecretUpdateRequest) (*SecretUpdateResponse, error)
	CreateSecretVersion(context.Context, *SecretCreateVersionRequest) (*SecretCreateVersionResponse, error)
	TransitEncrypt(context.Context, *SecretTransitEncryptRequest) (*SecretTransitEncryptResponse, error)
	TransitDecrypt(context.Context, *SecretTransitDecryptRequest) (*SecretTransitDecryptResponse, error)
	mustEmbedUnimplementedSecretsServer()
}

// UnimplementedSecretsServer must be embedded to have forward compatible implementations.
type UnimplementedSecretsServer struct {
}

func (UnimplementedSecretsServer) CreateSecret(context.Context, *SecretCreateRequest) (*SecretCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSecret not implemented")
}
func (UnimplementedSecretsServer) UpdateSecret(context.Context, *SecretUpdateRequest) (*SecretUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSecret not implemented")
}
func (UnimplementedSecretsServer) CreateSecretVersion(context.Context, *SecretCreateVersionRequest) (*SecretCreateVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSecretVersion not implemented")
}
func (UnimplementedSecretsServer) TransitEncrypt(context.Context, *SecretTransitEncryptRequest) (*SecretTransitEncryptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransitEncrypt not implemented")
}
func (UnimplementedSecretsServer) TransitDecrypt(context.Context, *SecretTransitDecryptRequest) (*SecretTransitDecryptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransitDecrypt not implemented")
}
func (UnimplementedSecretsServer) mustEmbedUnimplementedSecretsServer() {}

// UnsafeSecretsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SecretsServer will
// result in compilation errors.
type UnsafeSecretsServer interface {
	mustEmbedUnimplementedSecretsServer()
}

func RegisterSecretsServer(s grpc.ServiceRegistrar, srv SecretsServer) {
	s.RegisterService(&Secrets_ServiceDesc, srv)
}

func _Secrets_CreateSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecretCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretsServer).CreateSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Secrets/CreateSecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretsServer).CreateSecret(ctx, req.(*SecretCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Secrets_UpdateSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecretUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretsServer).UpdateSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Secrets/UpdateSecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretsServer).UpdateSecret(ctx, req.(*SecretUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Secrets_CreateSecretVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecretCreateVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretsServer).CreateSecretVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Secrets/CreateSecretVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretsServer).CreateSecretVersion(ctx, req.(*SecretCreateVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Secrets_TransitEncrypt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecretTransitEncryptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretsServer).TransitEncrypt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Secrets/TransitEncrypt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretsServer).TransitEncrypt(ctx, req.(*SecretTransitEncryptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Secrets_TransitDecrypt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecretTransitDecryptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretsServer).TransitDecrypt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Secrets/TransitDecrypt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretsServer).TransitDecrypt(ctx, req.(*SecretTransitDecryptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Secrets_ServiceDesc is the grpc.ServiceDesc for Secrets service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Secrets_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Secrets",
	HandlerType: (*SecretsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSecret",
			Handler:    _Secrets_CreateSecret_Handler,
		},
		{
			MethodName: "UpdateSecret",
			Handler:    _Secrets_UpdateSecret_Handler,
		},
		{
			MethodName: "CreateSecretVersion",
			Handler:    _Secrets_CreateSecretVersion_Handler,
		},
		{
			MethodName: "TransitEncrypt",
			Handler:    _Secrets_TransitEncrypt_Handler,
		},
		{
			MethodName: "TransitDecrypt",
			Handler:    _Secrets_TransitDecrypt_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/protos/src/secrets.proto",
}
